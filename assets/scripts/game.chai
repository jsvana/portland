use("assets/scripts/helpers.chai");

global UPDATE_INTERVAL = 50;
global PROJECTILE_SPEED = 3;
global PROJECTILE_MAX_DISTANCE = 100;

global movementFuncs = [noopMovement];

def addMovementFunc(id, func) {
  if (movementFuncs.size() != id) {
    throw("Expected movementFuncs to have " + id + " elements, but it has " + movementFuncs.size());
  }
  movementFuncs.push_back(func);
}

def skipMovementFunc(id) {
  addMovementFunc(id, noopMovement);
}

def init() {
  if (initialized()) {
    return;
  }
  loadMap("assets/maps/city.json");
  loadCharacter("assets/sprites/hero.json", 1, 6);
  getHero().setTile(6);
  getHero().setMaxHp(100);
  setCharacterMoveSpeed(2.0);

  // Add an NPC
  var id = addNpc("assets/sprites/undead.json", 4, 1);
  addMovementFunc(id, randomMovement);
  setId("enemy", id);
  var npc = getSprite(id);
  npc.setTile(0);
  npc.setMaxHp(10);
  npc.fullHeal();

  // Add a jump-enabling bowtie
  id = addItem("assets/sprites/item.json", 6, 10);
  setId("bowtie", id);
  getSprite(id).setTile(8);
  skipMovementFunc(id);

  // Add a fireball-enabling zippo
  id = addItem("assets/sprites/item.json", 19, 10);
  setId("zippo", id);
  getSprite(id).setTile(4);
  skipMovementFunc(id);

  restoreCallbacks();

  // registerTileAction(9, 6, showSign);
}

def restoreCallbacks() {
  getHero().setCollisionCallback(heroCollision);
}

def jump() {
  if (getHero().holdingItem(getId("bowtie"))) {
    getHero().startJump(1);
  }
}

def action() {
  if (dialogRunning()) {
    return;
  }
  runTileAction();
}

def attack() {
  if (!getHero().getFlag("firing")) {
    getHero().setFlag("firing", true);
    var id;
    if (getHero().holdingItem(getId("zippo"))) {
      id = fireFromSprite(getHero(), "assets/sprites/fireball.json", 2);
    } else {
      id = fireFromSprite(getHero(), "assets/sprites/record.json", 0);
    }
    var projectile = getSprite(id);
    projectile.setCollisionCallback(projectileCollision);
    projectile.setCleanupCallback(projectileCleanup);
  }
}

def update() {
  if (dialogRunning()) {
    return;
  }

  if (directionPressed(DIRECTION_LEFT)) {
    queueMove(DIRECTION_LEFT);
  }
  if (directionPressed(DIRECTION_RIGHT)) {
    queueMove(DIRECTION_RIGHT);
  }

  if (jumpPressed()) {
    jump();
  }

  for (var i = 1; i < movementFuncs.size(); i += 1) {
    if (spriteNull(i)) {
      continue;
    }
    movementFuncs[i](i);
  }
}

def projectileCollision(projectileId, otherId) {
  if (otherId == getHero().id) {
    return;
  }
  getSprite(projectileId).markNeedsCleanup();
  if (otherId != getId("enemy")) {
    return;
  }
  var enemy = getSprite(otherId);
  enemy.move(5, 0);
  enemy.damage(5);
}

def projectileCleanup(projectileId) {
  getHero().setFlag("firing", false);
}

def heroCollision(heroId, otherId) {
  if (otherId != getId("bowtie") && otherId != getId("zippo")) {
    return;
  }
  var item = getItem(otherId);
  if (item.held()) {
    return;
  }
  item.hold();
  getHero().addItem(otherId);
}

def showSign() {
  showDialog("Hello!");
}
